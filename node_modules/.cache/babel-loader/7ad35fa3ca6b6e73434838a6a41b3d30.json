{"ast":null,"code":"import { QuestCreate, QuestMean, QuestSd, QuestQuantile, QuestUpdate, PAL_Gumbel } from \"./Quest.js\";\nexport function test() {\n  var math = require('mathjs');\n\n  var tGuess = 0.5,\n      tGuessSd = 0.1,\n      pThreshold = 0.75,\n      beta = 3.5,\n      delta = 0.01,\n      gamma = 0.01,\n      grain = 0.001,\n      range = .05;\n  var q1 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range); //console.log(q1); \n\n  var q2 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range);\n  q2.updatePdf = 1;\n  q2 = QuestUpdate(q2, 0.5, 1);\n  console.log(q2);\n  var t1 = QuestMean(q1); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd1 = QuestSd(q2);\n  var t2 = QuestMean(q2); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd2 = QuestSd(q2); // Take the arithmetic mean of these two threshold (75%) estimates.\n\n  var tmean = math.mean([t1, t2]);\n  var sdmean = math.mean([sd1, sd2]);\n  console.log(t1, sd1, t2, sd2, tmean, sdmean);\n}\nexport function vis_quest(trialsDesired, tGuess_1, tGuessSd_1, tGuess_2, tGuessSd_2, pThreshold, beta, delta, gamma) {\n  var q1 = QuestCreate(tGuess_1, tGuessSd_1, pThreshold, beta, delta, gamma);\n  q1.normalizePdf = 1;\n  var q2 = QuestCreate(tGuess_2, tGuessSd_2, pThreshold, beta, delta, gamma);\n  q2.normalizePdf = 1; // Quest Trial numbers\n\n  var q1_trialnum = 0;\n  var q2_trialnum = 0;\n  var k = 0; //overall trial numbers\n\n  var frame = 0;\n  var log_contrast_1;\n  var log_contrast_2;\n  var currentQ = 0;\n  console.log(q1);\n\n  while (k < trialsDesired * 2) {\n    var nowTime = new Date().getTime() / 1000;\n    k += 1;\n\n    if (q1_trialnum == q2_trialnum) {\n      // if equal trial numbers, time to go to the next one for staircase 1_\n      q1_trialnum = q1_trialnum + 1;\n      currentQ = 1;\n    }\n\n    if (q1_trialnum != q2_trialnum) {\n      // cannot have multiple if and else blocks in Javascript\n      q2_trialnum = q2_trialnum + 1;\n      currentQ = 2;\n    }\n\n    if (currentQ == 1) {\n      if (k == 1) {\n        log_contrast_1 = tGuess_1 + 0.3; //  Make this procedure go from high to low contrast.\n      } // if(k != 1){\n      //     if !isNaN(trialdata_1{q_1_trialnum-1,2})  // Repeat last level if pt did not have recorded response.\n      //             log_contrast_1=QuestQuantile(q_1) // Recommended by Pelli (1987), and still our favorite\n      // }\n      // if ~isnan(trialdata_1{q_1_trialnum,2})\n      //q_1=QuestUpdate(q_1,log_contrast_1,accuracy_1(q_1_trialnum,1)); % Add the new datum (actual test intensity and observer response) to the database.\n      ///////////////////////////DOES TRIALDATA ISNAN HAVE TO BE INCLUDED? //////////////////////////////////////\n      else {\n          if (k == 2) {\n            log_contrast_2 = tGuess_2 - 0.3; // Make this procedure go from low to high contrast\n          } else {\n            log_contrast_2 = QuestQuantile(q2);\n          }\n        }\n    }\n  }\n\n  var math = require('mathjs'); //Statistics\n\n\n  var t1 = QuestMean(q1); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd1 = QuestSd(q1);\n  var t2 = QuestMean(q2); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd2 = QuestSd(q2); // Take the arithmetic mean of these two threshold (75%) estimates.\n\n  var tmean = math.mean([t1, t2]);\n  var sdmean = math.mean([sd1, sd2]);\n  var lambda = 0; // normally in config file//////////////////////\n\n  var gamma = 0.01; // normally in config file//////////////////////\n\n  var intensities = gumbel_intensities(q1, q2, tmean, lambda, gamma);\n  return intensities;\n} //   To be used within context of QUEST-like program.  Defines intensities at\n//   which participants are likely to detect tone in noise at 75%\n//   (threshold), 50%, 25% probabilities.  First row of returned matrix are\n//   these labels.  The second gives the intensities in decibels, the third\n//   in scale units (coefficient used to scale full-scaled tone).  Required\n//   inputs are the QUEST structures produced by the CH QUEST procedure via\n//   ch_auditory_quest. q_1 and q_2 variables are the structures produced by\n//   the QUEST procedure.  t_mean is the arithmetic mean of the two threshold\n//   estimates produced by the two interleaved staircases.\n\nexport function process_data(q1, q2) {\n  var math = require('mathjs'); //Statistics\n\n\n  var t1 = QuestMean(q1); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd1 = QuestSd(q1);\n  var t2 = QuestMean(q2); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd2 = QuestSd(q2); // Take the arithmetic mean of these two threshold (75%) estimates.\n\n  var tmean = math.mean([t1, t2]);\n  var sdmean = math.mean([sd1, sd2]);\n  var lambda = 0; // normally in config file//////////////////////\n\n  var gamma = 0.01; // normally in config file//////////////////////\n\n  var intensities = gumbel_intensities(q1, q2, tmean, lambda, gamma);\n  return intensities;\n}\nexport function gumbel_intensities(q1, q2, tmean, lambda, gamma) {\n  var returnStruct = {\n    intensities: [],\n    parameters: [],\n    beta: 0\n  };\n  var intensities = [];\n  intensities.push([25, 50, 75, 90]);\n  intensities.push([]);\n\n  var math = require('mathjs'); //parameters(1,:) = ch_QuestBetaAnalysis(q_1);\n  //parameters(2,:) = ch_QuestBetaAnalysis(q_2);\n\n\n  var mean_beta = 3.5; // changed 3/25/2019. Trying fixed beta at 3.5 (suggested generic beta value by Quest documentation) instead of individually estimating.\n\n  var mean_alpha = tmean;\n  var estimate_beta = math.mean(q1.beta, q2.beta);\n  returnStruct.beta = estimate_beta;\n\n  var fzero = require(\"fzero\");\n\n  var fn90 = function fn90(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.90).toString();\n  };\n\n  var fn75 = function fn75(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.75).toString();\n  };\n\n  var fn50 = function fn50(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.50).toString();\n  };\n\n  var fn25 = function fn25(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.25).toString();\n  };\n\n  var zero = fzero(fn25, 2).solution; //var zero = PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, 0);\n\n  intensities[1].push(fzero(fn25, 2).solution);\n  intensities[1].push(fzero(fn50, 2).solution);\n  intensities[1].push(fzero(fn75, 2).solution);\n  intensities[1].push(fzero(fn90, 2).solution);\n  intensities.push(intensities[1]);\n  returnStruct.intensities = intensities;\n  console.log(returnStruct);\n  return returnStruct;\n}\nexport function ch_QuestBetaAnalysis(q) {\n  console.log(q);\n\n  var math = require('mathjs');\n\n  var q2 = QuestCreate(q.tGuess, q.tGuessSd, q.pThreshold, math.eval(\"2^(1/4)\"), q.delta, q.gamma, 0.02);\n  q2.dim = 250; //var qq = QuestRecompute( q2 ); \n\n  console.log(q2); // var t2= QuestMean(q2); // estimate threshold for each possible beta\n  // var p2= QuestPdf(q2,t2); // get probability of each of these (threshold,beta) combinations\n  // var sd2= QuestSd(q2); // get sd of threshold for each possible beta\n  // var beta2 = q2.beta;\n  // console.log(t2, p2, sd2, beta2);\n  // var p = Math.max(p2); \n  // var index = indexOfMax(p2);\n  // var t = t2[index];\n  // var sd = QuestSd(q2);\n  // p = math.sum(p2);\n  // var betaMean = p2.map(function(x) {return x * beta2});\n  // betaMean = math.sum(betaMean);\n  // betaMean = betaMean / p;\n  //var temp1 = p2.map(function(x) { return (math.pow( (x * beta2), 2) ) } );\n}","map":{"version":3,"sources":["C:\\Users\\Alika\\Desktop\\VCH_APP\\src\\VisualQuest.js"],"names":["QuestCreate","QuestMean","QuestSd","QuestQuantile","QuestUpdate","PAL_Gumbel","test","math","require","tGuess","tGuessSd","pThreshold","beta","delta","gamma","grain","range","q1","q2","updatePdf","console","log","t1","sd1","t2","sd2","tmean","mean","sdmean","vis_quest","trialsDesired","tGuess_1","tGuessSd_1","tGuess_2","tGuessSd_2","normalizePdf","q1_trialnum","q2_trialnum","k","frame","log_contrast_1","log_contrast_2","currentQ","nowTime","Date","getTime","lambda","intensities","gumbel_intensities","process_data","returnStruct","parameters","push","mean_beta","mean_alpha","estimate_beta","fzero","fn90","x","toString","fn75","fn50","fn25","zero","solution","ch_QuestBetaAnalysis","q","eval","dim"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,aAA1C,EAAyDC,WAAzD,EAAsEC,UAAtE,QAAwF,YAAxF;AAEA,OAAO,SAASC,IAAT,GAAe;AAClB,MAAMC,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAIC,MAAM,GAAG,GAAb;AAAA,MACEC,QAAQ,GAAG,GADb;AAAA,MAEEC,UAAU,GAAG,IAFf;AAAA,MAGEC,IAAI,GAAG,GAHT;AAAA,MAIEC,KAAK,GAAG,IAJV;AAAA,MAKEC,KAAK,GAAG,IALV;AAAA,MAMEC,KAAK,GAAG,KANV;AAAA,MAOEC,KAAK,GAAG,GAPV;AAQA,MAAIC,EAAE,GAAGjB,WAAW,CAACS,MAAD,EAASC,QAAT,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4CC,KAA5C,EAAmDC,KAAnD,EAA0DC,KAA1D,CAApB,CAXkB,CAalB;;AACA,MAAIE,EAAE,GAAGlB,WAAW,CAACS,MAAD,EAASC,QAAT,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4CC,KAA5C,EAAmDC,KAAnD,EAA0DC,KAA1D,CAApB;AACAE,EAAAA,EAAE,CAACC,SAAH,GAAe,CAAf;AACAD,EAAAA,EAAE,GAAGd,WAAW,CAACc,EAAD,EAAK,GAAL,EAAU,CAAV,CAAhB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AACA,MAAII,EAAE,GAAGrB,SAAS,CAACgB,EAAD,CAAlB,CAlBkB,CAkBO;;AACzB,MAAIM,GAAG,GAAGrB,OAAO,CAACgB,EAAD,CAAjB;AAEA,MAAIM,EAAE,GAAGvB,SAAS,CAACiB,EAAD,CAAlB,CArBkB,CAqBO;;AACzB,MAAIO,GAAG,GAAGvB,OAAO,CAACgB,EAAD,CAAjB,CAtBkB,CAwBlB;;AACA,MAAIQ,KAAK,GAAGnB,IAAI,CAACoB,IAAL,CAAU,CAACL,EAAD,EAAKE,EAAL,CAAV,CAAZ;AACA,MAAII,MAAM,GAAGrB,IAAI,CAACoB,IAAL,CAAU,CAACJ,GAAD,EAAME,GAAN,CAAV,CAAb;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ,EAAgBC,GAAhB,EAAqBC,EAArB,EAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCE,MAArC;AACH;AAED,OAAO,SAASC,SAAT,CAAoBC,aAApB,EAAmCC,QAAnC,EAA6CC,UAA7C,EAAyDC,QAAzD,EAAmEC,UAAnE,EAA+EvB,UAA/E,EAA2FC,IAA3F,EAAiGC,KAAjG,EAAwGC,KAAxG,EAA+G;AAElH,MAAIG,EAAE,GAAEjB,WAAW,CAAC+B,QAAD,EAAWC,UAAX,EAAuBrB,UAAvB,EAAmCC,IAAnC,EAAyCC,KAAzC,EAAgDC,KAAhD,CAAnB;AACAG,EAAAA,EAAE,CAACkB,YAAH,GAAkB,CAAlB;AAEA,MAAIjB,EAAE,GAAGlB,WAAW,CAACiC,QAAD,EAAWC,UAAX,EAAuBvB,UAAvB,EAAmCC,IAAnC,EAAyCC,KAAzC,EAAgDC,KAAhD,CAApB;AACAI,EAAAA,EAAE,CAACiB,YAAH,GAAkB,CAAlB,CANkH,CAQlH;;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,CAAC,GAAG,CAAR,CAXkH,CAWlF;;AAChC,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,cAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAQ,GAAG,CAAf;AAEAtB,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;;AAEA,SAAMqB,CAAC,GAAIR,aAAa,GAAG,CAA3B,EAA8B;AAC1B,QAAIa,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAArC;AAGAP,IAAAA,CAAC,IAAI,CAAL;;AAEA,QAAGF,WAAW,IAAIC,WAAlB,EAA8B;AAAG;AACzBD,MAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B;AACAM,MAAAA,QAAQ,GAAG,CAAX;AACP;;AACD,QAAGN,WAAW,IAAIC,WAAlB,EAA8B;AAAG;AAC7BA,MAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B;AACAK,MAAAA,QAAQ,GAAG,CAAX;AACH;;AACD,QAAIA,QAAQ,IAAI,CAAhB,EAAmB;AAEf,UAAGJ,CAAC,IAAI,CAAR,EAAU;AACNE,QAAAA,cAAc,GAAGT,QAAQ,GAAG,GAA5B,CADM,CAC4B;AACrC,OAFD,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAVA,WAYI;AACA,cAAIO,CAAC,IAAI,CAAT,EAAY;AACRG,YAAAA,cAAc,GAAGR,QAAQ,GAAG,GAA5B,CADQ,CAC0B;AACrC,WAFD,MAGI;AACAQ,YAAAA,cAAc,GAAGtC,aAAa,CAACe,EAAD,CAA9B;AACH;AACJ;AACJ;AAEJ;;AAED,MAAMX,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,CA3DkH,CA6DlH;;;AACA,MAAIc,EAAE,GAAGrB,SAAS,CAACgB,EAAD,CAAlB,CA9DkH,CA8DzF;;AACzB,MAAIM,GAAG,GAAErB,OAAO,CAACe,EAAD,CAAhB;AAEA,MAAIO,EAAE,GAAGvB,SAAS,CAACiB,EAAD,CAAlB,CAjEkH,CAiEzF;;AACzB,MAAIO,GAAG,GAAGvB,OAAO,CAACgB,EAAD,CAAjB,CAlEkH,CAoElH;;AACA,MAAIQ,KAAK,GAAGnB,IAAI,CAACoB,IAAL,CAAU,CAACL,EAAD,EAAIE,EAAJ,CAAV,CAAZ;AACA,MAAII,MAAM,GAAGrB,IAAI,CAACoB,IAAL,CAAU,CAACJ,GAAD,EAAKE,GAAL,CAAV,CAAb;AAEA,MAAIqB,MAAM,GAAG,CAAb,CAxEkH,CAwElG;;AAChB,MAAIhC,KAAK,GAAG,IAAZ,CAzEkH,CAyEhG;;AAElB,MAAIiC,WAAW,GAAGC,kBAAkB,CAAC/B,EAAD,EAAKC,EAAL,EAASQ,KAAT,EAAgBoB,MAAhB,EAAwBhC,KAAxB,CAApC;AAEA,SAAOiC,WAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,YAAT,CAAuBhC,EAAvB,EAA2BC,EAA3B,EAAgC;AACnC,MAAMX,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,CADmC,CAGnC;;;AACA,MAAIc,EAAE,GAAGrB,SAAS,CAACgB,EAAD,CAAlB,CAJmC,CAIV;;AACzB,MAAIM,GAAG,GAAGrB,OAAO,CAACe,EAAD,CAAjB;AAEA,MAAIO,EAAE,GAAGvB,SAAS,CAACiB,EAAD,CAAlB,CAPmC,CAOV;;AACzB,MAAIO,GAAG,GAAGvB,OAAO,CAACgB,EAAD,CAAjB,CARmC,CAUnC;;AACA,MAAIQ,KAAK,GAAGnB,IAAI,CAACoB,IAAL,CAAU,CAACL,EAAD,EAAKE,EAAL,CAAV,CAAZ;AACA,MAAII,MAAM,GAAGrB,IAAI,CAACoB,IAAL,CAAU,CAACJ,GAAD,EAAME,GAAN,CAAV,CAAb;AAEA,MAAIqB,MAAM,GAAG,CAAb,CAdmC,CAcnB;;AAChB,MAAIhC,KAAK,GAAG,IAAZ,CAfmC,CAejB;;AAElB,MAAIiC,WAAW,GAAGC,kBAAkB,CAAC/B,EAAD,EAAKC,EAAL,EAASQ,KAAT,EAAgBoB,MAAhB,EAAwBhC,KAAxB,CAApC;AAEA,SAAOiC,WAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4B/B,EAA5B,EAAgCC,EAAhC,EAAoCQ,KAApC,EAA2CoB,MAA3C,EAAmDhC,KAAnD,EAAyD;AAE9D,MAAIoC,YAAY,GAAG;AACfH,IAAAA,WAAW,EAAE,EADE;AAEfI,IAAAA,UAAU,EAAE,EAFG;AAGfvC,IAAAA,IAAI,EAAE;AAHS,GAAnB;AAMA,MAAImC,WAAW,GAAG,EAAlB;AACAA,EAAAA,WAAW,CAACK,IAAZ,CAAkB,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,CAAlB;AACAL,EAAAA,WAAW,CAACK,IAAZ,CAAkB,EAAlB;;AAEA,MAAM7C,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,CAZ8D,CAc9D;AACA;;;AAEA,MAAI6C,SAAS,GAAG,GAAhB,CAjB8D,CAiBxC;;AACtB,MAAIC,UAAU,GAAG5B,KAAjB;AACA,MAAI6B,aAAa,GAAGhD,IAAI,CAACoB,IAAL,CAAUV,EAAE,CAACL,IAAb,EAAmBM,EAAE,CAACN,IAAtB,CAApB;AACAsC,EAAAA,YAAY,CAACtC,IAAb,GAAoB2C,aAApB;;AAEA,MAAIC,KAAK,GAAGhD,OAAO,CAAC,OAAD,CAAnB;;AAEA,MAAIiD,IAAI,GAAG,SAAPA,IAAO,CAAUC,CAAV,EAAa;AAAE,WAAM,CAAErD,UAAU,CAACiD,UAAD,EAAaD,SAAb,EAAwBvC,KAAxB,EAA+BgC,MAA/B,EAAuCY,CAAvC,CAAV,GAAsD,IAAxD,EAA+DC,QAA/D,EAAN;AAAkF,GAA5G;;AACA,MAAIC,IAAI,GAAG,SAAPA,IAAO,CAAUF,CAAV,EAAa;AAAE,WAAM,CAAErD,UAAU,CAACiD,UAAD,EAAaD,SAAb,EAAwBvC,KAAxB,EAA+BgC,MAA/B,EAAuCY,CAAvC,CAAV,GAAsD,IAAxD,EAA+DC,QAA/D,EAAN;AAAkF,GAA5G;;AACA,MAAIE,IAAI,GAAG,SAAPA,IAAO,CAAUH,CAAV,EAAa;AAAE,WAAM,CAAErD,UAAU,CAACiD,UAAD,EAAaD,SAAb,EAAwBvC,KAAxB,EAA+BgC,MAA/B,EAAuCY,CAAvC,CAAV,GAAsD,IAAxD,EAA+DC,QAA/D,EAAN;AAAkF,GAA5G;;AACA,MAAIG,IAAI,GAAG,SAAPA,IAAO,CAAUJ,CAAV,EAAa;AAAE,WAAO,CAAErD,UAAU,CAACiD,UAAD,EAAaD,SAAb,EAAwBvC,KAAxB,EAA+BgC,MAA/B,EAAuCY,CAAvC,CAAV,GAAsD,IAAxD,EAA8DC,QAA9D,EAAP;AAAmF,GAA7G;;AAEA,MAAII,IAAI,GAAGP,KAAK,CAACM,IAAD,EAAO,CAAP,CAAL,CAAeE,QAA1B,CA7B8D,CA8B9D;;AACAjB,EAAAA,WAAW,CAAC,CAAD,CAAX,CAAeK,IAAf,CAAqBI,KAAK,CAACM,IAAD,EAAO,CAAP,CAAL,CAAeE,QAApC;AACAjB,EAAAA,WAAW,CAAC,CAAD,CAAX,CAAeK,IAAf,CAAqBI,KAAK,CAACK,IAAD,EAAO,CAAP,CAAL,CAAeG,QAApC;AACAjB,EAAAA,WAAW,CAAC,CAAD,CAAX,CAAeK,IAAf,CAAqBI,KAAK,CAACI,IAAD,EAAO,CAAP,CAAL,CAAeI,QAApC;AACAjB,EAAAA,WAAW,CAAC,CAAD,CAAX,CAAeK,IAAf,CAAqBI,KAAK,CAACC,IAAD,EAAO,CAAP,CAAL,CAAeO,QAApC;AACAjB,EAAAA,WAAW,CAACK,IAAZ,CAAiBL,WAAW,CAAC,CAAD,CAA5B;AAEAG,EAAAA,YAAY,CAACH,WAAb,GAA2BA,WAA3B;AACA3B,EAAAA,OAAO,CAACC,GAAR,CAAa6B,YAAb;AAEA,SAAOA,YAAP;AACD;AAEH,OAAO,SAASe,oBAAT,CAA+BC,CAA/B,EAAkC;AAErC9C,EAAAA,OAAO,CAACC,GAAR,CAAY6C,CAAZ;;AAEA,MAAM3D,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAIU,EAAE,GAAIlB,WAAW,CAAEkE,CAAC,CAACzD,MAAJ,EAAYyD,CAAC,CAACxD,QAAd,EAAwBwD,CAAC,CAACvD,UAA1B,EAAsCJ,IAAI,CAAC4D,IAAL,CAAU,SAAV,CAAtC,EAA4DD,CAAC,CAACrD,KAA9D,EAAqEqD,CAAC,CAACpD,KAAvE,EAA8E,IAA9E,CAArB;AAEAI,EAAAA,EAAE,CAACkD,GAAH,GAAS,GAAT,CARqC,CASrC;;AAEAhD,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAXqC,CAarC;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH","sourcesContent":["import { QuestCreate, QuestMean, QuestSd, QuestQuantile, QuestUpdate, PAL_Gumbel } from \"./Quest.js\"\r\n\r\nexport function test(){\r\n    const math = require('mathjs');\r\n\r\n    var tGuess = 0.5,\r\n      tGuessSd = 0.1,\r\n      pThreshold = 0.75,\r\n      beta = 3.5,\r\n      delta = 0.01,\r\n      gamma = 0.01,\r\n      grain = 0.001,\r\n      range = .05;\r\n    var q1 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range);\r\n\r\n    //console.log(q1); \r\n    var q2 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range);\r\n    q2.updatePdf = 1; \r\n    q2 = QuestUpdate(q2, 0.5, 1);\r\n    console.log(q2)\r\n    var t1 = QuestMean(q1);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd1 = QuestSd(q2);\r\n\r\n    var t2 = QuestMean(q2);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd2 = QuestSd(q2);\r\n\r\n    // Take the arithmetic mean of these two threshold (75%) estimates.\r\n    var tmean = math.mean([t1, t2]);\r\n    var sdmean = math.mean([sd1, sd2]);\r\n\r\n    console.log(t1, sd1, t2, sd2, tmean, sdmean);\r\n}\r\n\r\nexport function vis_quest( trialsDesired, tGuess_1, tGuessSd_1, tGuess_2, tGuessSd_2, pThreshold, beta, delta, gamma ){\r\n\r\n    var q1= QuestCreate(tGuess_1, tGuessSd_1, pThreshold, beta, delta, gamma);\r\n    q1.normalizePdf = 1;\r\n\r\n    var q2 = QuestCreate(tGuess_2, tGuessSd_2, pThreshold, beta, delta, gamma);\r\n    q2.normalizePdf = 1;\r\n\r\n    // Quest Trial numbers\r\n    var q1_trialnum = 0;\r\n    var q2_trialnum = 0;\r\n    var k = 0;                      //overall trial numbers\r\n    var frame = 0; \r\n    var log_contrast_1;\r\n    var log_contrast_2;\r\n    var currentQ = 0; \r\n\r\n    console.log(q1); \r\n\r\n    while(k < (trialsDesired * 2)){\r\n        var nowTime = new Date().getTime() / 1000;     \r\n\r\n        \r\n        k += 1; \r\n\r\n        if(q1_trialnum == q2_trialnum){  // if equal trial numbers, time to go to the next one for staircase 1_\r\n                q1_trialnum = q1_trialnum + 1;\r\n                currentQ = 1;\r\n        }\r\n        if(q1_trialnum != q2_trialnum){  // cannot have multiple if and else blocks in Javascript\r\n            q2_trialnum = q2_trialnum + 1;\r\n            currentQ = 2;\r\n        }\r\n        if( currentQ == 1 ){\r\n            \r\n            if(k == 1){\r\n                log_contrast_1 = tGuess_1 + 0.3;  //  Make this procedure go from high to low contrast.\r\n            }\r\n            // if(k != 1){\r\n            //     if !isNaN(trialdata_1{q_1_trialnum-1,2})  // Repeat last level if pt did not have recorded response.\r\n            //             log_contrast_1=QuestQuantile(q_1) // Recommended by Pelli (1987), and still our favorite\r\n            // }\r\n            // if ~isnan(trialdata_1{q_1_trialnum,2})\r\n            //q_1=QuestUpdate(q_1,log_contrast_1,accuracy_1(q_1_trialnum,1)); % Add the new datum (actual test intensity and observer response) to the database.\r\n\r\n            ///////////////////////////DOES TRIALDATA ISNAN HAVE TO BE INCLUDED? //////////////////////////////////////\r\n\r\n            else{\r\n                if( k == 2 ){\r\n                    log_contrast_2 = tGuess_2 - 0.3;  // Make this procedure go from low to high contrast\r\n                }\r\n                else{\r\n                    log_contrast_2 = QuestQuantile(q2);\r\n                }\r\n            }\r\n        }\r\n                \r\n    }\r\n\r\n    const math = require('mathjs');\r\n\r\n    //Statistics\r\n    var t1 = QuestMean(q1);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd1= QuestSd(q1);\r\n    \r\n    var t2 = QuestMean(q2);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd2 = QuestSd(q2);\r\n    \r\n    // Take the arithmetic mean of these two threshold (75%) estimates.\r\n    var tmean = math.mean([t1,t2]);\r\n    var sdmean = math.mean([sd1,sd2]);\r\n\r\n    var lambda = 0; // normally in config file//////////////////////\r\n    var gamma = 0.01; // normally in config file//////////////////////\r\n\r\n    var intensities = gumbel_intensities(q1, q2, tmean, lambda, gamma);\r\n\r\n    return intensities; \r\n}\r\n\r\n//   To be used within context of QUEST-like program.  Defines intensities at\r\n//   which participants are likely to detect tone in noise at 75%\r\n//   (threshold), 50%, 25% probabilities.  First row of returned matrix are\r\n//   these labels.  The second gives the intensities in decibels, the third\r\n//   in scale units (coefficient used to scale full-scaled tone).  Required\r\n//   inputs are the QUEST structures produced by the CH QUEST procedure via\r\n//   ch_auditory_quest. q_1 and q_2 variables are the structures produced by\r\n//   the QUEST procedure.  t_mean is the arithmetic mean of the two threshold\r\n//   estimates produced by the two interleaved staircases.\r\n\r\nexport function process_data( q1, q2 ) {\r\n    const math = require('mathjs');\r\n\r\n    //Statistics\r\n    var t1 = QuestMean(q1);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd1 = QuestSd(q1);\r\n\r\n    var t2 = QuestMean(q2);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd2 = QuestSd(q2);\r\n\r\n    // Take the arithmetic mean of these two threshold (75%) estimates.\r\n    var tmean = math.mean([t1, t2]);\r\n    var sdmean = math.mean([sd1, sd2]);\r\n\r\n    var lambda = 0; // normally in config file//////////////////////\r\n    var gamma = 0.01; // normally in config file//////////////////////\r\n\r\n    var intensities = gumbel_intensities(q1, q2, tmean, lambda, gamma);\r\n\r\n    return intensities; \r\n  }\r\n\r\n  export function gumbel_intensities(q1, q2, tmean, lambda, gamma){\r\n\r\n    var returnStruct = {\r\n        intensities: [],\r\n        parameters: [],\r\n        beta: 0,\r\n    }\r\n\r\n    var intensities = []\r\n    intensities.push( [ 25, 50, 75, 90 ] );\r\n    intensities.push( [] );\r\n\r\n    const math = require('mathjs');\r\n\r\n    //parameters(1,:) = ch_QuestBetaAnalysis(q_1);\r\n    //parameters(2,:) = ch_QuestBetaAnalysis(q_2);\r\n\r\n    var mean_beta = 3.5;  // changed 3/25/2019. Trying fixed beta at 3.5 (suggested generic beta value by Quest documentation) instead of individually estimating.\r\n    var mean_alpha = tmean;\r\n    var estimate_beta = math.mean(q1.beta, q2.beta);\r\n    returnStruct.beta = estimate_beta;\r\n\r\n    var fzero = require(\"fzero\");\r\n\r\n    var fn90 = function (x) { return( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.90 ).toString(); };\r\n    var fn75 = function (x) { return( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.75 ).toString(); };\r\n    var fn50 = function (x) { return( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.50 ).toString(); };\r\n    var fn25 = function (x) { return ( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.25).toString();  };\r\n\r\n    var zero = fzero(fn25, 2).solution;\r\n    //var zero = PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, 0);\r\n    intensities[1].push( fzero(fn25, 2).solution );\r\n    intensities[1].push( fzero(fn50, 2).solution );\r\n    intensities[1].push( fzero(fn75, 2).solution );\r\n    intensities[1].push( fzero(fn90, 2).solution );\r\n    intensities.push(intensities[1])\r\n\r\n    returnStruct.intensities = intensities; \r\n    console.log( returnStruct ); \r\n\r\n    return returnStruct;\r\n  }\r\n\r\nexport function ch_QuestBetaAnalysis( q ){\r\n    \r\n    console.log(q); \r\n\r\n    const math = require('mathjs');\r\n\r\n    var q2 =  QuestCreate( q.tGuess, q.tGuessSd, q.pThreshold, math.eval(\"2^(1/4)\"), q.delta, q.gamma, 0.02);\r\n\r\n    q2.dim = 250; \r\n    //var qq = QuestRecompute( q2 ); \r\n\r\n    console.log(q2); \r\n\r\n    // var t2= QuestMean(q2); // estimate threshold for each possible beta\r\n    // var p2= QuestPdf(q2,t2); // get probability of each of these (threshold,beta) combinations\r\n    // var sd2= QuestSd(q2); // get sd of threshold for each possible beta\r\n    // var beta2 = q2.beta;\r\n\r\n    // console.log(t2, p2, sd2, beta2);\r\n\r\n    // var p = Math.max(p2); \r\n    // var index = indexOfMax(p2);\r\n    // var t = t2[index];\r\n    // var sd = QuestSd(q2);\r\n    // p = math.sum(p2);\r\n    // var betaMean = p2.map(function(x) {return x * beta2});\r\n    // betaMean = math.sum(betaMean);\r\n    // betaMean = betaMean / p;\r\n\r\n    //var temp1 = p2.map(function(x) { return (math.pow( (x * beta2), 2) ) } );\r\n}"]},"metadata":{},"sourceType":"module"}